{"version":3,"sources":["RedactorInput.js"],"names":["$","Craft","RedactorInput","Garnish","Base","extend","id","linkOptions","volumes","elementSiteId","redactorConfig","$textarea","redactor","linkOptionModals","init","settings","this","transforms","lang","redactorLang","direction","orientation","imageUpload","fileUpload","dragImageUpload","dragFileUpload","plugins","push","buttons","index","inArray","splice","lowestListButtonIndex","oldListButtons","i","length","callbacks","started","handleRedactorInit","focus","onEditorFocus","bind","blur","onEditorBlur","contextbar","showContextBar","initRedactor","selector","toolbarFixed","target","closest","toolbarFixedTarget","currentInstance","$R","toolbarButtons","toolbar","getButtonsKeys","includes","plugin","craftAssetImages","overrideButton","setTransforms","setVolumes","setElementSiteId","craftAssetFiles","craftEntryLinks","setLinkOptions","onInitRedactor","container","getElement","addClass","leaveFullscreetOnSaveShortcut","opts","scrollPageOnReady","$doc","ready","trigger","removeClass","fullscreen","close","cp","on","proxy","isOpen","replaceRedactorButton","key","title","allButtons","indexOf","previousButton","getButtonByIndex","icon","$icon","get","placeholderKey","placeholder","addButtonAfter","remove","button","setIcon","e","justResized","current","selection","getCurrent","data","inspector","parse","repositionContextBar","top","clientY","$contextbar","height","position","left","clientX","width","css","isFigcaption","isComponentType","node","getComponent","$img","find","matches","attr","match","assetId","postActionRequest","success","image-editor","api","args","edit","set","jQuery"],"mappings":"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","file":"RedactorInput.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Redactor input class\n     */\n    Craft.RedactorInput = Garnish.Base.extend(\n        {\n            id: null,\n            linkOptions: null,\n            volumes: null,\n            elementSiteId: null,\n            redactorConfig: null,\n\n            $textarea: null,\n            redactor: null,\n            linkOptionModals: null,\n\n            init: function(settings) {\n                this.id = settings.id;\n                this.linkOptions = settings.linkOptions;\n                this.volumes = settings.volumes;\n                this.transforms = settings.transforms;\n                this.elementSiteId = settings.elementSiteId;\n                this.redactorConfig = settings.redactorConfig;\n\n                this.linkOptionModals = [];\n\n                if (!this.redactorConfig.lang) {\n                    this.redactorConfig.lang = settings.redactorLang;\n                }\n\n                if (!this.redactorConfig.direction) {\n                    this.redactorConfig.direction = (settings.direction || Craft.orientation);\n                }\n\n                this.redactorConfig.imageUpload = true;\n                this.redactorConfig.fileUpload = true;\n                this.redactorConfig.dragImageUpload = false;\n                this.redactorConfig.dragFileUpload = false;\n\n                // Prevent a JS error when calling core.destroy() when opts.plugins == false\n                if (typeof this.redactorConfig.plugins !== typeof []) {\n                    this.redactorConfig.plugins = [];\n                }\n\n                this.redactorConfig.plugins.push('craftAssetImages');\n                this.redactorConfig.plugins.push('craftAssetFiles');\n                this.redactorConfig.plugins.push('craftEntryLinks');\n                this.redactorConfig.plugins.push('craftAssetImageEditor');\n\n                // Redactor I/II config setting normalization\n                if (this.redactorConfig.buttons) {\n                    var index;\n\n                    // buttons.formatting => buttons.format\n                    if ((index = $.inArray('formatting', this.redactorConfig.buttons)) !== -1) {\n                        this.redactorConfig.buttons.splice(index, 1, 'format');\n                    }\n\n                    // buttons.unorderedlist/orderedlist/undent/indent => buttons.lists\n                    var oldListButtons = ['unorderedlist', 'orderedlist', 'undent', 'indent'],\n                        lowestListButtonIndex;\n\n                    for (var i = 0; i < oldListButtons.length; i++) {\n                        if ((index = $.inArray(oldListButtons[i], this.redactorConfig.buttons)) !== -1) {\n                            this.redactorConfig.buttons.splice(index, 1);\n\n                            if (typeof lowestListButtonIndex === 'undefined' || index < lowestListButtonIndex) {\n                                lowestListButtonIndex = index;\n                            }\n                        }\n                    }\n\n                    if (typeof lowestListButtonIndex !== 'undefined') {\n                        this.redactorConfig.buttons.splice(lowestListButtonIndex, 0, 'lists');\n                    }\n                }\n\n                // Define our callbacks\n                this.redactorConfig.callbacks = {\n                    started: Craft.RedactorInput.handleRedactorInit,\n                    focus: this.onEditorFocus.bind(this),\n                    blur: this.onEditorBlur.bind(this),\n                    contextbar: this.showContextBar.bind(this)\n                };\n\n                // Initialize Redactor\n                this.initRedactor();\n            },\n\n            initRedactor: function() {\n                var selector = '#' + this.id;\n                this.$textarea = $(selector);\n\n                if (typeof this.redactorConfig.toolbarFixed === 'undefined' || this.redactorConfig.toolbarFixed) {\n                    // Set the toolbarFixedTarget depending on the context\n                    var target = this.$textarea.closest('#content-container, .lp-editor');\n                    if (target.length) {\n                        this.redactorConfig.toolbarFixedTarget = target;\n                    }\n                }\n\n                Craft.RedactorInput.currentInstance = this;\n                this.$textarea.redactor(this.redactorConfig);\n\n                this.redactor = $R(selector);\n\n                var toolbarButtons = this.redactor.toolbar.getButtonsKeys();\n\n                if (toolbarButtons.includes('image')) {\n                    this.redactor.plugin.craftAssetImages.overrideButton('image');\n                    this.redactor.plugin.craftAssetImages.setTransforms(this.transforms);\n                    this.redactor.plugin.craftAssetImages.setVolumes(this.volumes);\n                    this.redactor.plugin.craftAssetImages.setElementSiteId(this.elementSiteId);\n                }\n\n                if (toolbarButtons.includes('file')) {\n                    this.redactor.plugin.craftAssetFiles.overrideButton('file');\n                    this.redactor.plugin.craftAssetFiles.setVolumes(this.volumes);\n                    this.redactor.plugin.craftAssetFiles.setElementSiteId(this.elementSiteId);\n                }\n\n                if (toolbarButtons.includes('link')) {\n                    this.redactor.plugin.craftEntryLinks.setElementSiteId(this.elementSiteId);\n                    \n                    if (this.linkOptions.length) {\n                        this.redactor.plugin.craftEntryLinks.setLinkOptions(this.linkOptions);\n                    }\n                }\n\n                delete Craft.RedactorInput.currentInstance;\n            },\n\n            onInitRedactor: function(redactor) {\n\n                this.redactor = redactor;\n\n                // Add the .focusable-input class for Craft.CP\n                this.redactor.container.getElement().addClass('focusable-input');\n\n                this.leaveFullscreetOnSaveShortcut();\n\n                if (this.redactor.opts.toolbarFixed && !Craft.RedactorInput.scrollPageOnReady) {\n                    Garnish.$doc.ready(function() {\n                        Garnish.$doc.trigger('scroll');\n                    });\n\n                    Craft.RedactorInput.scrollPageOnReady = true;\n                }\n            },\n\n            onEditorFocus: function() {\n                this.redactor.container.getElement().addClass('focus');\n                this.redactor.container.getElement().trigger('focus');\n            },\n\n            onEditorBlur: function() {\n                this.redactor.container.getElement().removeClass('focus');\n                this.redactor.container.getElement().trigger('blur');\n            },\n\n            leaveFullscreetOnSaveShortcut: function() {\n                if (typeof this.redactor.plugin.fullscreen !== 'undefined' && typeof this.redactor.plugin.fullscreen.close === 'function') {\n                    Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\n                        if (this.redactor.plugin.fullscreen.isOpen) {\n                            this.redactor.plugin.fullscreen.close();\n                        }\n                    }, this));\n                }\n            },\n\n            replaceRedactorButton: function(key, title) {\n                // Ignore if the button isn't in use\n                var allButtons = this.redactor.toolbar.getButtonsKeys();\n                var currentButtonIndex = allButtons.indexOf(key);\n\n                if (currentButtonIndex == -1) {\n                    return;\n                }\n\n                var previousButton = this.redactor.toolbar.getButtonByIndex(allButtons.indexOf(key));\n                var icon = previousButton.$icon.get(0);\n\n                var placeholderKey = key+'_placeholder';\n                var placeholder = this.redactor.toolbar.addButtonAfter(key, placeholderKey, {title: title});\n                previousButton.remove();\n\n                // Create the new button\n                var button = this.redactor.toolbar.addButtonAfter(placeholderKey, key, {title: title});\n                placeholder.remove();\n\n                button.setIcon(icon);\n\n                return button;\n            },\n\n            showContextBar: function(e, contextbar) {\n                if (this.justResized)\n                {\n                    this.justResized = false;\n                    return;\n                }\n\n                var current = this.redactor.selection.getCurrent();\n                var data = this.redactor.inspector.parse(current);\n\n                var repositionContextBar = function (e, contextbar) {\n                    var top = e.clientY - contextbar.$contextbar.height() - 10;\n                    var left = e.clientX - contextbar.$contextbar.width() / 2;\n\n                    var position = {\n                        left: left + 'px',\n                        top: top + 'px'\n                    };\n\n                    contextbar.$contextbar.css(position);\n                };\n\n                if (!data.isFigcaption() && data.isComponentType('image'))\n                {\n                    var node = data.getComponent();\n                    var $img  = $(node).find('img');\n                    if ($img.length === 1) {\n                        var matches = matches = $img.attr('src').match(/#asset:(\\d+)/i);\n                        if (matches) {\n                            var assetId = matches[1];\n                            Craft.postActionRequest('redactor', {assetId: assetId}, function (data) {\n                                if (data.success) {\n                                    var buttons = {\n                                        \"image-editor\": {\n                                            title: this.redactor.lang.get('image-editor'),\n                                            api: 'plugin.craftAssetImageEditor.open',\n                                            args: assetId\n                                        },\n                                        \"edit\": {\n                                            title: this.redactor.lang.get('edit'),\n                                            api: 'module.image.open'\n                                        },\n                                        \"remove\": {\n                                            title: this.redactor.lang.get('delete'),\n                                            api: 'module.image.remove',\n                                            args: node\n                                        }\n                                    };\n\n                                    contextbar.set(e, node, buttons);\n                                }\n\n                                repositionContextBar(e, contextbar);\n                            }.bind(this));\n                        }\n                    }\n\n                }\n\n                repositionContextBar(e, contextbar);\n            }\n        },\n        {\n            handleRedactorInit: function() {\n                // `this` is the current Redactor instance.\n                // `Craft.RedactorInput.currentInstance` is the current RedactorInput instance\n                Craft.RedactorInput.currentInstance.onInitRedactor(this);\n            }\n        });\n})(jQuery);\n"]}