{"version":3,"sources":["CraftEntryLinks.js"],"names":["plugin","$","extend","Craft","Redactor","PluginBase","start","showModal","arguments","this","app","selection","isCollapsed","save","selectionMarkers","saveMarkers","modalProperty","refHandle","createElementSelectorModal","elementType","storageKey","sources","criteria","siteId","elementSiteId","onSelect","proxy","elements","length","restoreMarkers","restore","element","getText","data","url","id","text","label","api","closeOtherModals","show","setLinkOptions","linkOptions","button","toolbar","getButton","items","getDropdown","newList","counter","option","title","optionTitle","args","setDropdown","add"],"mappings":"AAAA,IAAIA,OAASC,EAAEC,UAAWC,MAAMC,SAASC,YAGrCC,MAAO,aAGPC,UAAW,SAAUC,WACbC,KAAKC,IAAIC,UAAUC,eACnBH,KAAKC,IAAIC,UAAUE,OACnBJ,KAAKC,IAAII,kBAAmB,IAE5BL,KAAKC,IAAIC,UAAUI,cACnBN,KAAKC,IAAII,kBAAmB,GAGhC,IAAIE,EAAgB,kBAAkBR,UAAUS,UAChD,QAAmC,IAAxBR,KAAKO,GAAgC,CAC5C,IAAIC,EAAYT,UAAUS,UAC1BR,KAAKO,GAAiBb,MAAMe,2BAA2BV,UAAUW,aAC7DC,WAAY,wBAA0BZ,UAAUW,YAChDE,QAASb,UAAUa,QACnBC,SAAUrB,EAAEC,QAAQqB,OAAQd,KAAKe,eAAgBhB,UAAUc,UAC3DG,SAAUxB,EAAEyB,MAAM,SAASC,GACvB,GAAIA,EAASC,OAAQ,CACbnB,KAAKC,IAAII,iBACTL,KAAKC,IAAIC,UAAUkB,iBAEnBpB,KAAKC,IAAIC,UAAUmB,UAGvBrB,KAAKC,IAAII,kBAAmB,EAE5B,IAAIiB,EAAUJ,EAAS,GACnBhB,EAAYF,KAAKC,IAAIC,UAAUqB,UAC/BC,GACIC,IAAKH,EAAQG,IAAM,IAAMjB,EAAY,IAAMc,EAAQI,GACnDC,KAAyB,EAAnBzB,EAAUiB,OAAajB,EAAYoB,EAAQM,OAEzD5B,KAAKC,IAAI4B,IAAI,qBAAsBL,KAExCxB,MACH8B,kBAAkB,SAItB9B,KAAKO,GAAewB,QAI5BC,eAAgB,SAAUC,GACtB,IAAIC,EAASlC,KAAKC,IAAIkC,QAAQC,UAAU,QAEpCC,EADWH,EAAOI,cACDD,MACjBE,KACAC,EAAU,EAEd,IAAK,IAAIC,KAAUR,EACfQ,EAASR,EAAYQ,GACrBF,EAAQ,YAAYC,IAChBE,MAAOD,EAAOE,YACdd,IAAK,mCACLe,MACIlC,YAAa+B,EAAO/B,YACpBF,UAAWiC,EAAOjC,UAClBI,QAAS6B,EAAO7B,QAChBC,SAAU4B,EAAO5B,WAK7BqB,EAAOW,YAAYrD,EAAEC,OAAO8C,EAASF,OAM1C1C,SADImD,IAAI,SAAU,kBAAmBvD","file":"CraftEntryLinks.min.js","sourcesContent":["var plugin = $.extend({}, Craft.Redactor.PluginBase, {\n\n    // Do nothing on start.\n    start: function () {\n\n    },\n    showModal: function (arguments) {\n        if (this.app.selection.isCollapsed()) {\n            this.app.selection.save();\n            this.app.selectionMarkers = false;\n        } else {\n            this.app.selection.saveMarkers();\n            this.app.selectionMarkers = true;\n        }\n\n        var modalProperty = 'selectionModal_'+arguments.refHandle;\n        if (typeof this[modalProperty] === 'undefined') {\n            var refHandle = arguments.refHandle;\n            this[modalProperty] = Craft.createElementSelectorModal(arguments.elementType, {\n                storageKey: 'RedactorInput.LinkTo.' + arguments.elementType,\n                sources: arguments.sources,\n                criteria: $.extend({siteId: this.elementSiteId}, arguments.criteria),\n                onSelect: $.proxy(function(elements) {\n                    if (elements.length) {\n                        if (this.app.selectionMarkers) {\n                            this.app.selection.restoreMarkers();\n                        } else {\n                            this.app.selection.restore();\n                        }\n\n                        this.app.selectionMarkers = false;\n\n                        var element = elements[0],\n                            selection = this.app.selection.getText(),\n                            data = {\n                                url: element.url + '#' + refHandle + ':' + element.id,\n                                text: selection.length > 0 ? selection : element.label\n                            };\n                        this.app.api('module.link.insert', data);\n                    }\n                }, this),\n                closeOtherModals: false,\n            });\n        }\n        else {\n            this[modalProperty].show();\n        }\n    },\n\n    setLinkOptions: function (linkOptions) {\n        var button = this.app.toolbar.getButton('link'),\n            dropdown = button.getDropdown(),\n            items = dropdown.items,\n            newList = {},\n            counter = 0;\n\n        for (var option in linkOptions) {\n            option = linkOptions[option];\n            newList['custom'+(++counter)] = {\n                title: option.optionTitle,\n                api: 'plugin.craftEntryLinks.showModal',\n                args: {\n                    elementType: option.elementType,\n                    refHandle: option.refHandle,\n                    sources: option.sources,\n                    criteria: option.criteria\n                }\n            };\n        }\n\n        button.setDropdown($.extend(newList, items));\n    }\n});\n\n(function($R) {\n    $R.add('plugin', 'craftEntryLinks', plugin);\n})(Redactor);"]}