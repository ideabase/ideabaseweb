{"version":3,"sources":["RedactorInput.js"],"names":["$","Craft","RedactorInput","Garnish","Base","extend","id","linkOptions","volumes","elementSiteId","redactorConfig","$textarea","redactor","linkOptionModals","init","settings","this","transforms","lang","redactorLang","direction","orientation","imageUpload","fileUpload","plugins","push","buttons","index","inArray","splice","lowestListButtonIndex","oldListButtons","i","length","callbacks","started","handleRedactorInit","focus","onEditorFocus","bind","blur","onEditorBlur","contextbar","showContextBar","initRedactor","selector","toolbarFixed","target","closest","toolbarFixedTarget","currentInstance","$R","toolbarButtons","toolbar","getButtonsKeys","indexOf","plugin","craftAssetImages","overrideButton","addButton","setTransforms","setVolumes","setElementSiteId","craftAssetFiles","craftEntryLinks","setLinkOptions","onInitRedactor","container","getElement","addClass","leaveFullscreetOnSaveShortcut","opts","scrollPageOnReady","$doc","ready","trigger","removeClass","fullscreen","close","cp","on","proxy","isOpen","replaceRedactorButton","key","title","allButtons","previousButton","getButtonByIndex","icon","$icon","get","placeholderKey","placeholder","addButtonAfter","remove","button","setIcon","e","justResized","current","selection","getCurrent","data","inspector","parse","repositionContextBar","top","clientY","$contextbar","height","position","left","clientX","width","css","isFigcaption","isComponentType","node","getComponent","$img","find","matches","attr","match","assetId","postActionRequest","success","image-editor","api","args","edit","set","jQuery"],"mappings":"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","file":"RedactorInput.min.js","sourcesContent":["(function($) {\r\n    /** global: Craft */\r\n    /** global: Garnish */\r\n    /**\r\n     * Redactor input class\r\n     */\r\n    Craft.RedactorInput = Garnish.Base.extend(\r\n        {\r\n            id: null,\r\n            linkOptions: null,\r\n            volumes: null,\r\n            elementSiteId: null,\r\n            redactorConfig: null,\r\n\r\n            $textarea: null,\r\n            redactor: null,\r\n            linkOptionModals: null,\r\n\r\n            init: function(settings) {\r\n                this.id = settings.id;\r\n                this.linkOptions = settings.linkOptions;\r\n                this.volumes = settings.volumes;\r\n                this.transforms = settings.transforms;\r\n                this.elementSiteId = settings.elementSiteId;\r\n                this.redactorConfig = settings.redactorConfig;\r\n\r\n                this.linkOptionModals = [];\r\n\r\n                if (!this.redactorConfig.lang) {\r\n                    this.redactorConfig.lang = settings.redactorLang;\r\n                }\r\n\r\n                if (!this.redactorConfig.direction) {\r\n                    this.redactorConfig.direction = (settings.direction || Craft.orientation);\r\n                }\r\n\r\n                this.redactorConfig.imageUpload = false;\r\n                this.redactorConfig.fileUpload = false;\r\n\r\n                // Prevent a JS error when calling core.destroy() when opts.plugins == false\r\n                if (typeof this.redactorConfig.plugins !== typeof []) {\r\n                    this.redactorConfig.plugins = [];\r\n                }\r\n\r\n                this.redactorConfig.plugins.push('craftAssetImages');\r\n                this.redactorConfig.plugins.push('craftAssetFiles');\r\n                this.redactorConfig.plugins.push('craftEntryLinks');\r\n                this.redactorConfig.plugins.push('craftAssetImageEditor');\r\n\r\n                // Redactor I/II config setting normalization\r\n                if (this.redactorConfig.buttons) {\r\n                    var index;\r\n\r\n                    // buttons.formatting => buttons.format\r\n                    if ((index = $.inArray('formatting', this.redactorConfig.buttons)) !== -1) {\r\n                        this.redactorConfig.buttons.splice(index, 1, 'format');\r\n                    }\r\n\r\n                    // buttons.unorderedlist/orderedlist/undent/indent => buttons.lists\r\n                    var oldListButtons = ['unorderedlist', 'orderedlist', 'undent', 'indent'],\r\n                        lowestListButtonIndex;\r\n\r\n                    for (var i = 0; i < oldListButtons.length; i++) {\r\n                        if ((index = $.inArray(oldListButtons[i], this.redactorConfig.buttons)) !== -1) {\r\n                            this.redactorConfig.buttons.splice(index, 1);\r\n\r\n                            if (typeof lowestListButtonIndex === 'undefined' || index < lowestListButtonIndex) {\r\n                                lowestListButtonIndex = index;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (typeof lowestListButtonIndex !== 'undefined') {\r\n                        this.redactorConfig.buttons.splice(lowestListButtonIndex, 0, 'lists');\r\n                    }\r\n                }\r\n\r\n                // Define our callbacks\r\n                this.redactorConfig.callbacks = {\r\n                    started: Craft.RedactorInput.handleRedactorInit,\r\n                    focus: this.onEditorFocus.bind(this),\r\n                    blur: this.onEditorBlur.bind(this),\r\n                    contextbar: this.showContextBar.bind(this)\r\n                };\r\n\r\n                // Initialize Redactor\r\n                this.initRedactor();\r\n            },\r\n\r\n            initRedactor: function() {\r\n                var selector = '#' + this.id;\r\n                this.$textarea = $(selector);\r\n\r\n                if (typeof this.redactorConfig.toolbarFixed === 'undefined' || this.redactorConfig.toolbarFixed) {\r\n                    // Set the toolbarFixedTarget depending on the context\r\n                    var target = this.$textarea.closest('#content, .lp-editor');\r\n                    if (target.length) {\r\n                        this.redactorConfig.toolbarFixedTarget = target;\r\n                    }\r\n                }\r\n\r\n                Craft.RedactorInput.currentInstance = this;\r\n                this.$textarea.redactor(this.redactorConfig);\r\n\r\n                this.redactor = $R(selector);\r\n\r\n                if (typeof this.redactorConfig.buttons === 'undefined') {\r\n                    this.redactorConfig.buttons = [];\r\n                }\r\n\r\n                var toolbarButtons = this.redactor.toolbar.getButtonsKeys();\r\n\r\n                if (this.redactorConfig.buttons.indexOf('image') !== -1) {\r\n                    if (toolbarButtons.indexOf('image') !== -1) {\r\n                        this.redactor.plugin.craftAssetImages.overrideButton('image');\r\n                    } else {\r\n                        this.redactor.plugin.craftAssetImages.addButton('image', this.redactorConfig.buttons.indexOf('image'));\r\n                    }\r\n                    this.redactor.plugin.craftAssetImages.setTransforms(this.transforms);\r\n                    this.redactor.plugin.craftAssetImages.setVolumes(this.volumes);\r\n                    this.redactor.plugin.craftAssetImages.setElementSiteId(this.elementSiteId);\r\n                }\r\n\r\n                if (this.redactorConfig.buttons.indexOf('file') !== -1) {\r\n                    if (toolbarButtons.indexOf('file') !== -1) {\r\n                        this.redactor.plugin.craftAssetFiles.overrideButton('file');\r\n                    } else {\r\n                        this.redactor.plugin.craftAssetFiles.addButton('file', this.redactorConfig.buttons.indexOf('file'));\r\n                    }\r\n                    this.redactor.plugin.craftAssetFiles.setVolumes(this.volumes);\r\n                    this.redactor.plugin.craftAssetFiles.setElementSiteId(this.elementSiteId);\r\n                }\r\n\r\n                if (toolbarButtons.indexOf('link') !== -1) {\r\n                    this.redactor.plugin.craftEntryLinks.setElementSiteId(this.elementSiteId);\r\n                    \r\n                    if (this.linkOptions.length) {\r\n                        this.redactor.plugin.craftEntryLinks.setLinkOptions(this.linkOptions);\r\n                    }\r\n                }\r\n\r\n                delete Craft.RedactorInput.currentInstance;\r\n            },\r\n\r\n            onInitRedactor: function(redactor) {\r\n\r\n                this.redactor = redactor;\r\n\r\n                // Add the .focusable-input class for Craft.CP\r\n                this.redactor.container.getElement().addClass('focusable-input');\r\n\r\n                this.leaveFullscreetOnSaveShortcut();\r\n\r\n                if (this.redactor.opts.toolbarFixed && !Craft.RedactorInput.scrollPageOnReady) {\r\n                    Garnish.$doc.ready(function() {\r\n                        Garnish.$doc.trigger('scroll');\r\n                    });\r\n\r\n                    Craft.RedactorInput.scrollPageOnReady = true;\r\n                }\r\n            },\r\n\r\n            onEditorFocus: function() {\r\n                this.redactor.container.getElement().addClass('focus');\r\n                this.redactor.container.getElement().trigger('focus');\r\n            },\r\n\r\n            onEditorBlur: function() {\r\n                this.redactor.container.getElement().removeClass('focus');\r\n                this.redactor.container.getElement().trigger('blur');\r\n            },\r\n\r\n            leaveFullscreetOnSaveShortcut: function() {\r\n                if (typeof this.redactor.plugin.fullscreen !== 'undefined' && typeof this.redactor.plugin.fullscreen.close === 'function') {\r\n                    Craft.cp.on('beforeSaveShortcut', $.proxy(function() {\r\n                        if (this.redactor.plugin.fullscreen.isOpen) {\r\n                            this.redactor.plugin.fullscreen.close();\r\n                        }\r\n                    }, this));\r\n                }\r\n            },\r\n\r\n            replaceRedactorButton: function(key, title) {\r\n                // Ignore if the button isn't in use\r\n                var allButtons = this.redactor.toolbar.getButtonsKeys();\r\n                var currentButtonIndex = allButtons.indexOf(key);\r\n\r\n                if (currentButtonIndex == -1) {\r\n                    return;\r\n                }\r\n\r\n                var previousButton = this.redactor.toolbar.getButtonByIndex(allButtons.indexOf(key));\r\n                var icon = previousButton.$icon.get(0);\r\n\r\n                var placeholderKey = key+'_placeholder';\r\n                var placeholder = this.redactor.toolbar.addButtonAfter(key, placeholderKey, {title: title});\r\n                previousButton.remove();\r\n\r\n                // Create the new button\r\n                var button = this.redactor.toolbar.addButtonAfter(placeholderKey, key, {title: title});\r\n                placeholder.remove();\r\n\r\n                button.setIcon(icon);\r\n\r\n                return button;\r\n            },\r\n\r\n            showContextBar: function(e, contextbar) {\r\n                if (this.justResized)\r\n                {\r\n                    this.justResized = false;\r\n                    return;\r\n                }\r\n\r\n                var current = this.redactor.selection.getCurrent();\r\n                var data = this.redactor.inspector.parse(current);\r\n\r\n                var repositionContextBar = function (e, contextbar) {\r\n                    var top = e.clientY - contextbar.$contextbar.height() - 10;\r\n                    var left = e.clientX - contextbar.$contextbar.width() / 2;\r\n\r\n                    var position = {\r\n                        left: left + 'px',\r\n                        top: top + 'px'\r\n                    };\r\n\r\n                    contextbar.$contextbar.css(position);\r\n                };\r\n\r\n                if (!data.isFigcaption() && data.isComponentType('image'))\r\n                {\r\n                    var node = data.getComponent();\r\n                    var $img  = $(node).find('img');\r\n                    if ($img.length === 1) {\r\n                        var matches = matches = $img.attr('src').match(/#asset:(\\d+)/i);\r\n                        if (matches) {\r\n                            var assetId = matches[1];\r\n                            Craft.postActionRequest('redactor', {assetId: assetId}, function (data) {\r\n                                if (data.success) {\r\n                                    var buttons = {\r\n                                        \"image-editor\": {\r\n                                            title: this.redactor.lang.get('image-editor'),\r\n                                            api: 'plugin.craftAssetImageEditor.open',\r\n                                            args: assetId\r\n                                        },\r\n                                        \"edit\": {\r\n                                            title: this.redactor.lang.get('edit'),\r\n                                            api: 'module.image.open'\r\n                                        },\r\n                                        \"remove\": {\r\n                                            title: this.redactor.lang.get('delete'),\r\n                                            api: 'module.image.remove',\r\n                                            args: node\r\n                                        }\r\n                                    };\r\n\r\n                                    contextbar.set(e, node, buttons);\r\n                                }\r\n\r\n                                repositionContextBar(e, contextbar);\r\n                            }.bind(this));\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                repositionContextBar(e, contextbar);\r\n            }\r\n        },\r\n        {\r\n            handleRedactorInit: function() {\r\n                // `this` is the current Redactor instance.\r\n                // `Craft.RedactorInput.currentInstance` is the current RedactorInput instance\r\n                Craft.RedactorInput.currentInstance.onInitRedactor(this);\r\n            }\r\n        });\r\n})(jQuery);\r\n"]}