{"version":3,"sources":["webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/bootstrap-tokenfield/js/bootstrap-tokenfield.js"],"names":["g","this","Function","e","window","module","exports","global","factory","$","Tokenfield","element","options","_self","$element","textDirection","css","extend","fn","tokenfield","defaults","tokens","val","data","_delimiters","delimiter","_triggerKeys","map","charCodeAt","_firstDelimiter","whitespace","inArray","dash","unshift","specialCharacters","each","index","char","elCSSWidth","elRules","getMatchedCSSRules","elStyleWidth","style","width","elWidth","i","rule","hidingPosition","originalStyles","position","prop","$wrapper","hasClass","addClass","id","Date","getTime","Math","floor","random","$input","appendTo","$label","length","$copyHelper","prependTo","parents","disable","readonly","$mirror","minWidth","insertBefore","update","setTokens","listen","isEmptyObject","autocomplete","side","autocompleteOptions","minLength","showAutocompleteOnFocus","my","at","of","typeahead","typeaheadOptions","args","isArray","apply","trigger","prototype","constructor","createToken","attrs","triggerChange","value","label","trim","limit","getTokens","createEvent","Event","isDefaultPrevented","$token","attr","append","parent","before","$tokenLabel","find","$closeButton","maxTokenWidth","outerWidth","parseInt","text","on","_disabled","_readonly","preventDeactivation","ctrlKey","metaKey","preventDefault","toggle","activate","shiftKey","allowEditing","edit","proxy","remove","relatedTarget","get","getTokensList","initiator","add","split","RegExp","join","getTokenData","active","self","activeClass","push","beautify","separator","token","getInput","change","focusInput","focus","blur","paste","keydown","keypress","keyup","$_menuElement","menu","ui","item","unedit","datum","dataset","focused","keyCode","is","document","activeElement","lastInputValue","leftRight","upDown","activateAll","createTokensFromInput","lastKeyDown","direction","preventInputFocus","opposite","firstActiveToken","deactivate","lastKeyPressCode","lastKeyPressCharCode","charCode","$prevToken","prevAll","lastKeyUp","removeClass","$firstActiveToken","search","preventCreateTokens","createTokensOnBlur","setTimeout","tokensBefore","next","$nextToken","nextAll","prev","$lastActiveToken","multi","remember","a","slice","min","max","select","toggleClass","editEvent","tokenWidth","$_input","replaceWith","type","target","closest","firstToken","first","removeEvent","removedEvent","changeEvent","stopPropagation","inputPadding","mirrorWidth","offset","left","setProperty","enable","writeable","property","destroy","removeData","old","option","param","Array","arguments","elements","$this","shift","Constructor","noConflict","input","Error"],"mappings":"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","file":"js/vendors~seomatic-meta.js","sourcesContent":["var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n/*!\n * bootstrap-tokenfield\n * https://github.com/sliptree/bootstrap-tokenfield\n * Copyright 2013-2014 Sliptree and other contributors; Licensed MIT\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // For CommonJS and CommonJS-like environments where a window with jQuery\n    // is present, execute the factory with the jQuery instance from the window object\n    // For environments that do not inherently posses a window with a document\n    // (such as Node.js), expose a Tokenfield-making factory as module.exports\n    // This accentuates the need for the creation of a real window or passing in a jQuery instance\n    // e.g. require(\"bootstrap-tokenfield\")(window); or require(\"bootstrap-tokenfield\")($);\n    module.exports = global.window && global.window.$ ?\n      factory( global.window.$ ) :\n      function( input ) {\n        if ( !input.$ && !input.fn ) {\n          throw new Error( \"Tokenfield requires a window object with jQuery or a jQuery instance\" );\n        }\n        return factory( input.$ || input );\n      };\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n}(function ($, window) {\n\n  \"use strict\"; // jshint ;_;\n\n /* TOKENFIELD PUBLIC CLASS DEFINITION\n  * ============================== */\n\n  var Tokenfield = function (element, options) {\n    var _self = this\n\n    this.$element = $(element)\n    this.textDirection = this.$element.css('direction');\n\n    // Extend options\n    this.options = $.extend(true, {}, $.fn.tokenfield.defaults, { tokens: this.$element.val() }, this.$element.data(), options)\n    \n    // Setup delimiters and trigger keys\n    this._delimiters = (typeof this.options.delimiter === 'string') ? [this.options.delimiter] : this.options.delimiter\n    this._triggerKeys = $.map(this._delimiters, function (delimiter) {\n      return delimiter.charCodeAt(0);\n    });\n    this._firstDelimiter = this._delimiters[0];\n\n    // Check for whitespace, dash and special characters\n    var whitespace = $.inArray(' ', this._delimiters)\n      , dash = $.inArray('-', this._delimiters)\n\n    if (whitespace >= 0)\n      this._delimiters[whitespace] = '\\\\s'\n\n    if (dash >= 0) {\n      delete this._delimiters[dash]\n      this._delimiters.unshift('-')\n    }\n\n    var specialCharacters = ['\\\\', '$', '[', '{', '^', '.', '|', '?', '*', '+', '(', ')']\n    $.each(this._delimiters, function (index, char) {\n      var pos = $.inArray(char, specialCharacters)\n      if (pos >= 0) _self._delimiters[index] = '\\\\' + char;\n    });\n\n    // Store original input width\n    var elRules = (window && typeof window.getMatchedCSSRules === 'function') ? window.getMatchedCSSRules( element ) : null\n      , elStyleWidth = element.style.width\n      , elCSSWidth\n      , elWidth = this.$element.width()\n\n    if (elRules) {\n      $.each( elRules, function (i, rule) {\n        if (rule.style.width) {\n          elCSSWidth = rule.style.width;\n        }\n      });\n    }\n\n    // Move original input out of the way\n    var hidingPosition = $('body').css('direction') === 'rtl' ? 'right' : 'left',\n        originalStyles = { position: this.$element.css('position') };\n    originalStyles[hidingPosition] = this.$element.css(hidingPosition);\n    \n    this.$element\n      .data('original-styles', originalStyles)\n      .data('original-tabindex', this.$element.prop('tabindex'))\n      .css('position', 'absolute')\n      .css(hidingPosition, '-10000px')\n      .prop('tabindex', -1)\n\n    // Create a wrapper\n    this.$wrapper = $('<div class=\"tokenfield form-control\" />')\n    if (this.$element.hasClass('input-lg')) this.$wrapper.addClass('input-lg')\n    if (this.$element.hasClass('input-sm')) this.$wrapper.addClass('input-sm')\n    if (this.textDirection === 'rtl') this.$wrapper.addClass('rtl')\n\n    // Create a new input\n    var id = this.$element.prop('id') || new Date().getTime() + '' + Math.floor((1 + Math.random()) * 100)\n    this.$input = $('<input type=\"text\" class=\"token-input\" autocomplete=\"off\" />')\n                    .appendTo( this.$wrapper )\n                    .prop( 'placeholder',  this.$element.prop('placeholder') )\n                    .prop( 'id', id + '-tokenfield' )\n                    .prop( 'tabindex', this.$element.data('original-tabindex') )\n\n    // Re-route original input label to new input\n    var $label = $( 'label[for=\"' + this.$element.prop('id') + '\"]' )\n    if ( $label.length ) {\n      $label.prop( 'for', this.$input.prop('id') )\n    }\n\n    // Set up a copy helper to handle copy & paste\n    this.$copyHelper = $('<input type=\"text\" />').css('position', 'absolute').css(hidingPosition, '-10000px').prop('tabindex', -1).prependTo( this.$wrapper )\n    \n    // Set wrapper width\n    if (elStyleWidth) {\n      this.$wrapper.css('width', elStyleWidth);\n    }\n    else if (elCSSWidth) {\n      this.$wrapper.css('width', elCSSWidth);\n    }\n    // If input is inside inline-form with no width set, set fixed width\n    else if (this.$element.parents('.form-inline').length) {\n      this.$wrapper.width( elWidth )\n    }\n\n    // Set tokenfield disabled, if original or fieldset input is disabled\n    if (this.$element.prop('disabled') || this.$element.parents('fieldset[disabled]').length) {\n      this.disable();\n    }\n\n    // Set tokenfield readonly, if original input is readonly\n    if (this.$element.prop('readonly')) {\n      this.readonly();\n    }\n\n    // Set up mirror for input auto-sizing\n    this.$mirror = $('<span style=\"position:absolute; top:-999px; left:0; white-space:pre;\"/>');\n    this.$input.css('min-width', this.options.minWidth + 'px')\n    $.each([\n        'fontFamily', \n        'fontSize', \n        'fontWeight', \n        'fontStyle', \n        'letterSpacing', \n        'textTransform', \n        'wordSpacing', \n        'textIndent'\n    ], function (i, val) {\n        _self.$mirror[0].style[val] = _self.$input.css(val);\n    });\n    this.$mirror.appendTo( 'body' )\n\n    // Insert tokenfield to HTML\n    this.$wrapper.insertBefore( this.$element )\n    this.$element.prependTo( this.$wrapper )\n\n    // Calculate inner input width\n    this.update()\n    \n    // Create initial tokens, if any\n    this.setTokens(this.options.tokens, false, false)\n\n    // Start listening to events\n    this.listen()\n\n    // Initialize autocomplete, if necessary\n    if ( ! $.isEmptyObject( this.options.autocomplete ) ) {\n      var side = this.textDirection === 'rtl' ? 'right' : 'left'\n       ,  autocompleteOptions = $.extend({\n            minLength: this.options.showAutocompleteOnFocus ? 0 : null,\n            position: { my: side + \" top\", at: side + \" bottom\", of: this.$wrapper }\n          }, this.options.autocomplete )\n      \n      this.$input.autocomplete( autocompleteOptions )\n    }\n\n    // Initialize typeahead, if necessary\n    if ( ! $.isEmptyObject( this.options.typeahead ) ) {\n      \n      var typeaheadOptions = this.options.typeahead\n        , defaults = {\n            minLength: this.options.showAutocompleteOnFocus ? 0 : null\n          }\n        , args = $.isArray( typeaheadOptions ) ? typeaheadOptions : [typeaheadOptions, typeaheadOptions]\n      \n      args[0] = $.extend( {}, defaults, args[0] )\n\n      this.$input.typeahead.apply( this.$input, args )\n      this.typeahead = true\n    }\n\n    this.$element.trigger('tokenfield:initialize')\n  }\n\n  Tokenfield.prototype = {\n\n    constructor: Tokenfield\n\n  , createToken: function (attrs, triggerChange) {\n      var _self = this\n\n      if (typeof attrs === 'string') {\n        attrs = { value: attrs, label: attrs }\n      }\n\n      if (typeof triggerChange === 'undefined') {\n         triggerChange = true\n      }\n\n      // Normalize label and value\n      attrs.value = $.trim(attrs.value);\n      attrs.label = attrs.label && attrs.label.length ? $.trim(attrs.label) : attrs.value\n\n      // Bail out if has no value or label, or label is too short\n      if (!attrs.value.length || !attrs.label.length || attrs.label.length <= this.options.minLength) return\n\n      // Bail out if maximum number of tokens is reached\n      if (this.options.limit && this.getTokens().length >= this.options.limit) return\n\n      // Allow changing token data before creating it\n      var createEvent = $.Event('tokenfield:createtoken', { attrs: attrs })\n      this.$element.trigger(createEvent)\n\n      // Bail out if there if attributes are empty or event was defaultPrevented\n      if (!createEvent.attrs || createEvent.isDefaultPrevented()) return\n\n      var $token = $('<div class=\"token\" />')\n            .attr('data-value', attrs.value)\n            .append('<span class=\"token-label\" />')\n            .append('<a href=\"#\" class=\"close\" tabindex=\"-1\">&times;</a>')\n\n      // Insert token into HTML\n      if (this.$input.hasClass('tt-input')) {\n        // If the input has typeahead enabled, insert token before it's parent\n        this.$input.parent().before( $token )\n      } else {\n        this.$input.before( $token )\n      }\n\n      // Temporarily set input width to minimum\n      this.$input.css('width', this.options.minWidth + 'px')\n\n      var $tokenLabel = $token.find('.token-label')\n        , $closeButton = $token.find('.close')\n\n      // Determine maximum possible token label width\n      if (!this.maxTokenWidth) {\n        this.maxTokenWidth =\n          this.$wrapper.width() - $closeButton.outerWidth() - \n          parseInt($closeButton.css('margin-left'), 10) -\n          parseInt($closeButton.css('margin-right'), 10) -\n          parseInt($token.css('border-left-width'), 10) -\n          parseInt($token.css('border-right-width'), 10) -\n          parseInt($token.css('padding-left'), 10) -\n          parseInt($token.css('padding-right'), 10)\n          parseInt($tokenLabel.css('border-left-width'), 10) -\n          parseInt($tokenLabel.css('border-right-width'), 10) -\n          parseInt($tokenLabel.css('padding-left'), 10) -\n          parseInt($tokenLabel.css('padding-right'), 10)\n          parseInt($tokenLabel.css('margin-left'), 10) -\n          parseInt($tokenLabel.css('margin-right'), 10)\n      }\n\n      $tokenLabel\n        .text(attrs.label)\n        .css('max-width', this.maxTokenWidth)\n\n      // Listen to events on token\n      $token\n        .on('mousedown',  function (e) {\n          if (_self._disabled || _self._readonly) return false\n          _self.preventDeactivation = true\n        })\n        .on('click',    function (e) {\n          if (_self._disabled || _self._readonly) return false\n          _self.preventDeactivation = false\n\n          if (e.ctrlKey || e.metaKey) {\n            e.preventDefault()\n            return _self.toggle( $token )\n          }\n          \n          _self.activate( $token, e.shiftKey, e.shiftKey )          \n        })\n        .on('dblclick', function (e) {\n          if (_self._disabled || _self._readonly || !_self.options.allowEditing ) return false\n          _self.edit( $token )\n        })\n\n      $closeButton\n          .on('click',  $.proxy(this.remove, this))\n\n      // Trigger createdtoken event on the original field\n      // indicating that the token is now in the DOM\n      this.$element.trigger($.Event('tokenfield:createdtoken', {\n        attrs: attrs,\n        relatedTarget: $token.get(0)\n      }))\n\n      // Trigger change event on the original field\n      if (triggerChange) {\n        this.$element.val( this.getTokensList() ).trigger( $.Event('change', { initiator: 'tokenfield' }) )\n      }\n\n      // Update tokenfield dimensions\n      this.update()\n\n      // Return original element\n      return this.$element.get(0)\n    }    \n\n  , setTokens: function (tokens, add, triggerChange) {\n      if (!tokens) return\n\n      if (!add) this.$wrapper.find('.token').remove()\n\n      if (typeof triggerChange === 'undefined') {\n          triggerChange = true\n      }\n\n      if (typeof tokens === 'string') {\n        if (this._delimiters.length) {\n          // Split based on delimiters\n          tokens = tokens.split( new RegExp( '[' + this._delimiters.join('') + ']' ) )\n        } else {\n          tokens = [tokens];\n        }\n      }\n\n      var _self = this\n      $.each(tokens, function (i, attrs) {\n        _self.createToken(attrs, triggerChange)\n      })\n\n      return this.$element.get(0)\n    }\n\n  , getTokenData: function($token) {\n      var data = $token.map(function() {\n        var $token = $(this);\n        return {\n          value: $token.attr('data-value'),\n          label: $token.find('.token-label').text()\n        }\n      }).get();\n\n      if (data.length == 1) {\n        data = data[0];\n      }\n\n      return data;\n    }\n\n  , getTokens: function(active) {\n      var self = this\n        , tokens = []\n        , activeClass = active ? '.active' : '' // get active tokens only\n      this.$wrapper.find( '.token' + activeClass ).each( function() {\n        tokens.push( self.getTokenData( $(this) ) )\n      })\n      return tokens\n  }\n\n  , getTokensList: function(delimiter, beautify, active) {\n      delimiter = delimiter || this._firstDelimiter\n      beautify = ( typeof beautify !== 'undefined' && beautify !== null ) ? beautify : this.options.beautify\n      \n      var separator = delimiter + ( beautify && delimiter !== ' ' ? ' ' : '')\n      return $.map( this.getTokens(active), function (token) {\n        return token.value\n      }).join(separator)\n  }\n\n  , getInput: function() {\n    return this.$input.val()\n  }\n\n  , listen: function () {\n      var _self = this\n\n      this.$element\n        .on('change',   $.proxy(this.change, this))\n\n      this.$wrapper\n        .on('mousedown',$.proxy(this.focusInput, this))\n\n      this.$input\n        .on('focus',    $.proxy(this.focus, this))\n        .on('blur',     $.proxy(this.blur, this))\n        .on('paste',    $.proxy(this.paste, this))\n        .on('keydown',  $.proxy(this.keydown, this))\n        .on('keypress', $.proxy(this.keypress, this))\n        .on('keyup',    $.proxy(this.keyup, this))\n\n      this.$copyHelper\n        .on('focus',    $.proxy(this.focus, this))\n        .on('blur',     $.proxy(this.blur, this))        \n        .on('keydown',  $.proxy(this.keydown, this))\n        .on('keyup',    $.proxy(this.keyup, this))\n\n      // Secondary listeners for input width calculation\n      this.$input\n        .on('keypress', $.proxy(this.update, this))\n        .on('keyup',    $.proxy(this.update, this))\n\n      this.$input\n        .on('autocompletecreate', function() {\n          // Set minimum autocomplete menu width\n          var $_menuElement = $(this).data('ui-autocomplete').menu.element\n          \n          var minWidth = _self.$wrapper.outerWidth() -\n              parseInt( $_menuElement.css('border-left-width'), 10 ) -\n              parseInt( $_menuElement.css('border-right-width'), 10 )\n\n          $_menuElement.css( 'min-width', minWidth + 'px' )\n        })\n        .on('autocompleteselect', function (e, ui) {\n          if (_self.createToken( ui.item )) {\n            _self.$input.val('')\n            if (_self.$input.data( 'edit' )) {\n              _self.unedit(true)\n            }\n          }\n          return false\n        })\n        .on('typeahead:selected typeahead:autocompleted', function (e, datum, dataset) {\n          // Create token\n          if (_self.createToken( datum )) {\n            _self.$input.typeahead('val', '')\n            if (_self.$input.data( 'edit' )) {\n              _self.unedit(true)\n            }\n          }\n        })\n\n      // Listen to window resize\n      $(window).on('resize', $.proxy(this.update, this ))\n\n    }\n\n  , keydown: function (e) {\n\n      if (!this.focused) return\n\n      var _self = this\n\n      switch(e.keyCode) {\n        case 8: // backspace\n          if (!this.$input.is(document.activeElement)) break\n          this.lastInputValue = this.$input.val()\n          break\n\n        case 37: // left arrow\n          leftRight( this.textDirection === 'rtl' ? 'next': 'prev' )\n          break\n\n        case 38: // up arrow\n          upDown('prev')\n          break\n\n        case 39: // right arrow\n          leftRight( this.textDirection === 'rtl' ? 'prev': 'next' )\n          break\n\n        case 40: // down arrow\n          upDown('next')\n          break        \n\n        case 65: // a (to handle ctrl + a)\n          if (this.$input.val().length > 0 || !(e.ctrlKey || e.metaKey)) break\n          this.activateAll()\n          e.preventDefault()\n          break\n\n        case 9: // tab\n        case 13: // enter     \n\n          // We will handle creating tokens from autocomplete in autocomplete events\n          if (this.$input.data('ui-autocomplete') && this.$input.data('ui-autocomplete').menu.element.find(\"li:has(a.ui-state-focus)\").length) break\n          \n          // We will handle creating tokens from typeahead in typeahead events\n          if (this.$input.hasClass('tt-input') && this.$wrapper.find('.tt-cursor').length ) break\n          if (this.$input.hasClass('tt-input') && this.$wrapper.find('.tt-hint').val().length) break\n          \n          // Create token\n          if (this.$input.is(document.activeElement) && this.$input.val().length || this.$input.data('edit')) {\n            return this.createTokensFromInput(e, this.$input.data('edit'));\n          }\n\n          // Edit token\n          if (e.keyCode === 13) {\n            if (!this.$copyHelper.is(document.activeElement) || this.$wrapper.find('.token.active').length !== 1) break\n            if (!_self.options.allowEditing) break\n            this.edit( this.$wrapper.find('.token.active') )\n          }\n      }\n\n      function leftRight(direction) {\n        if (_self.$input.is(document.activeElement)) {\n          if (_self.$input.val().length > 0) return\n\n          direction += 'All'\n          var $token = _self.$input.hasClass('tt-input') ? _self.$input.parent()[direction]('.token:first') : _self.$input[direction]('.token:first')\n          if (!$token.length) return\n\n          _self.preventInputFocus = true\n          _self.preventDeactivation = true\n\n          _self.activate( $token )\n          e.preventDefault()\n\n        } else {\n          _self[direction]( e.shiftKey )\n          e.preventDefault()\n        }\n      }\n\n      function upDown(direction) {\n        if (!e.shiftKey) return\n\n        if (_self.$input.is(document.activeElement)) {\n          if (_self.$input.val().length > 0) return\n\n          var $token = _self.$input.hasClass('tt-input') ? _self.$input.parent()[direction + 'All']('.token:first') : _self.$input[direction + 'All']('.token:first')\n          if (!$token.length) return\n\n          _self.activate( $token )\n        }\n\n        var opposite = direction === 'prev' ? 'next' : 'prev'\n          , position = direction === 'prev' ? 'first' : 'last'\n\n        _self.firstActiveToken[opposite + 'All']('.token').each(function() {\n          _self.deactivate( $(this) )\n        })\n\n        _self.activate( _self.$wrapper.find('.token:' + position), true, true )\n        e.preventDefault()\n      }\n\n      this.lastKeyDown = e.keyCode\n    }\n\n  , keypress: function(e) {\n      this.lastKeyPressCode = e.keyCode\n      this.lastKeyPressCharCode = e.charCode\n\n      // Comma\n      if ($.inArray( e.charCode, this._triggerKeys) !== -1 && this.$input.is(document.activeElement)) {\n        if (this.$input.val()) {\n          this.createTokensFromInput(e)\n        }\n        return false;\n      }\n    }\n\n  , keyup: function (e) {\n      this.preventInputFocus = false\n\n      if (!this.focused) return\n\n      switch(e.keyCode) {\n        case 8: // backspace\n          if (this.$input.is(document.activeElement)) {\n            if (this.$input.val().length || this.lastInputValue.length && this.lastKeyDown === 8) break\n            \n            this.preventDeactivation = true\n            var $prevToken = this.$input.hasClass('tt-input') ? this.$input.parent().prevAll('.token:first') : this.$input.prevAll('.token:first')\n\n            if (!$prevToken.length) break\n\n            this.activate( $prevToken )\n          } else {\n            this.remove(e)\n          }\n          break\n\n        case 46: // delete\n          this.remove(e, 'next')\n          break\n      }\n      this.lastKeyUp = e.keyCode\n    }\n\n  , focus: function (e) {\n      this.focused = true\n      this.$wrapper.addClass('focus')\n\n      if (this.$input.is(document.activeElement)) {\n        this.$wrapper.find('.active').removeClass('active')\n        this.$firstActiveToken = null\n\n        if (this.options.showAutocompleteOnFocus) {\n          this.search()\n        }\n      }\n    }\n\n  , blur: function (e) {\n\n      this.focused = false\n      this.$wrapper.removeClass('focus')\n\n      if (!this.preventDeactivation && !this.$element.is(document.activeElement)) {\n        this.$wrapper.find('.active').removeClass('active')\n        this.$firstActiveToken = null\n      }\n\n      if (!this.preventCreateTokens && (this.$input.data('edit') && !this.$input.is(document.activeElement) || this.options.createTokensOnBlur )) {\n        this.createTokensFromInput(e) \n      }\n      \n      this.preventDeactivation = false\n      this.preventCreateTokens = false\n    }\n\n  , paste: function (e) {\n      var _self = this\n      \n      // Add tokens to existing ones\n      setTimeout(function () {\n        _self.createTokensFromInput(e)\n      }, 1)\n    }\n\n  , change: function (e) {\n      if ( e.initiator === 'tokenfield' ) return // Prevent loops\n      \n      this.setTokens( this.$element.val() )\n    }\n\n  , createTokensFromInput: function (e, focus) {\n      if (this.$input.val().length < this.options.minLength)\n        return // No input, simply return\n\n      var tokensBefore = this.getTokensList()\n      this.setTokens( this.$input.val(), true )\n      \n      if (tokensBefore == this.getTokensList() && this.$input.val().length)\n        return false // No tokens were added, do nothing (prevent form submit)\n\n      if (this.$input.hasClass('tt-input')) {\n        // Typeahead acts weird when simply setting input value to empty,\n        // so we set the query to empty instead\n        this.$input.typeahead('val', '')\n      } else {\n        this.$input.val('')\n      }\n\n      if (this.$input.data( 'edit' )) {\n        this.unedit(focus)\n      }\n\n      return false // Prevent form being submitted\n    }  \n\n  , next: function (add) {\n      if (add) {\n        var $firstActiveToken = this.$wrapper.find('.active:first')\n          , deactivate = $firstActiveToken && this.$firstActiveToken ? $firstActiveToken.index() < this.$firstActiveToken.index() : false\n\n        if (deactivate) return this.deactivate( $firstActiveToken )\n      }\n\n      var $lastActiveToken = this.$wrapper.find('.active:last')\n        , $nextToken = $lastActiveToken.nextAll('.token:first')\n\n      if (!$nextToken.length) {\n        this.$input.focus()\n        return\n      }\n\n      this.activate($nextToken, add)\n    }\n\n  , prev: function (add) {\n\n      if (add) {\n        var $lastActiveToken = this.$wrapper.find('.active:last')\n          , deactivate = $lastActiveToken && this.$firstActiveToken ? $lastActiveToken.index() > this.$firstActiveToken.index() : false\n\n        if (deactivate) return this.deactivate( $lastActiveToken )\n      }\n\n      var $firstActiveToken = this.$wrapper.find('.active:first')\n        , $prevToken = $firstActiveToken.prevAll('.token:first')\n\n      if (!$prevToken.length) {\n        $prevToken = this.$wrapper.find('.token:first')\n      }\n\n      if (!$prevToken.length && !add) {\n        this.$input.focus()\n        return\n      }\n\n      this.activate( $prevToken, add )\n    }\n\n  , activate: function ($token, add, multi, remember) {\n\n      if (!$token) return\n\n      if (typeof remember === 'undefined') var remember = true\n\n      if (multi) var add = true\n\n      this.$copyHelper.focus()\n\n      if (!add) {\n        this.$wrapper.find('.active').removeClass('active')\n        if (remember) {\n          this.$firstActiveToken = $token \n        } else {\n          delete this.$firstActiveToken\n        }\n      }\n\n      if (multi && this.$firstActiveToken) {\n        // Determine first active token and the current tokens indicies\n        // Account for the 1 hidden textarea by subtracting 1 from both\n        var i = this.$firstActiveToken.index() - 2\n          , a = $token.index() - 2\n          , _self = this\n\n        this.$wrapper.find('.token').slice( Math.min(i, a) + 1, Math.max(i, a) ).each( function() {\n          _self.activate( $(this), true )\n        })\n      }\n\n      $token.addClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , activateAll: function() {\n      var _self = this\n\n      this.$wrapper.find('.token').each( function (i) {\n        _self.activate($(this), i !== 0, false, false)\n      })\n    }\n\n  , deactivate: function($token) {\n      if (!$token) return\n\n      $token.removeClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , toggle: function($token) {\n      if (!$token) return\n\n      $token.toggleClass('active')\n      this.$copyHelper.val( this.getTokensList( null, null, true ) ).select()\n    }\n\n  , edit: function ($token) {\n      if (!$token) return\n\n      var attrs = {\n        value: $token.data('value'),\n        label: $token.find('.token-label').text()\n      }\n\n      // Allow changing input value before editing\n      var options = { attrs: attrs, relatedTarget: $token.get(0) }\n      var editEvent = $.Event('tokenfield:edittoken', options)\n      this.$element.trigger( editEvent )\n      \n      // Edit event can be cancelled if default is prevented\n      if (editEvent.isDefaultPrevented()) return\n\n      $token.find('.token-label').text(attrs.value)\n      var tokenWidth = $token.outerWidth()\n\n      var $_input = this.$input.hasClass('tt-input') ? this.$input.parent() : this.$input\n\n      $token.replaceWith( $_input )\n\n      this.preventCreateTokens = true\n\n      this.$input.val( attrs.value )\n                .select()\n                .data( 'edit', true )\n                .width( tokenWidth )\n\n      this.update();\n\n      // Indicate that token in snow being edited, and is replaced with an input field in the DOM\n      this.$element.trigger($.Event('tokenfield:editedtoken', options ))\n    }\n\n  , unedit: function (focus) {\n      var $_input = this.$input.hasClass('tt-input') ? this.$input.parent() : this.$input\n      $_input.appendTo( this.$wrapper )\n      \n      this.$input.data('edit', false)\n      this.$mirror.text('')\n\n      this.update()\n\n      // Because moving the input element around in DOM \n      // will cause it to lose focus, we provide an option\n      // to re-focus the input after appending it to the wrapper\n      if (focus) {\n        var _self = this\n        setTimeout(function () {\n          _self.$input.focus()\n        }, 1)\n      }\n    }\n\n  , remove: function (e, direction) {\n      if (this.$input.is(document.activeElement) || this._disabled || this._readonly) return\n\n      var $token = (e.type === 'click') ? $(e.target).closest('.token') : this.$wrapper.find('.token.active')\n      \n      if (e.type !== 'click') {\n        if (!direction) var direction = 'prev'\n        this[direction]()\n\n        // Was it the first token?\n        if (direction === 'prev') var firstToken = $token.first().prevAll('.token:first').length === 0\n      }\n\n      // Prepare events and their options\n      var options = { attrs: this.getTokenData( $token ), relatedTarget: $token.get(0) }\n        , removeEvent = $.Event('tokenfield:removetoken', options)\n      \n      this.$element.trigger(removeEvent);\n\n      // Remove event can be intercepted and cancelled\n      if (removeEvent.isDefaultPrevented()) return\n\n      var removedEvent = $.Event('tokenfield:removedtoken', options)\n        , changeEvent = $.Event('change', { initiator: 'tokenfield' })\n\n      // Remove token from DOM\n      $token.remove()\n\n      // Trigger events\n      this.$element.val( this.getTokensList() ).trigger( removedEvent ).trigger( changeEvent )\n\n      // Focus, when necessary:\n      // When there are no more tokens, or if this was the first token\n      // and it was removed with backspace or it was clicked on\n      if (!this.$wrapper.find('.token').length || e.type === 'click' || firstToken) this.$input.focus()\n\n      // Adjust input width\n      this.$input.css('width', this.options.minWidth + 'px')\n      this.update()\n\n      // Cancel original event handlers\n      e.preventDefault()\n      e.stopPropagation()\n    }\n\n    /**\n     * Update tokenfield dimensions\n     */\n  , update: function (e) {\n      var value = this.$input.val()\n        , inputPaddingLeft = parseInt(this.$input.css('padding-left'), 10)\n        , inputPaddingRight = parseInt(this.$input.css('padding-right'), 10)\n        , inputPadding = inputPaddingLeft + inputPaddingRight\n\n      if (this.$input.data('edit')) {\n\n        if (!value) {\n          value = this.$input.prop(\"placeholder\")\n        }\n        if (value === this.$mirror.text()) return\n\n        this.$mirror.text(value)\n        \n        var mirrorWidth = this.$mirror.width() + 10;\n        if ( mirrorWidth > this.$wrapper.width() ) {\n          return this.$input.width( this.$wrapper.width() )\n        }\n\n        this.$input.width( mirrorWidth )\n      }\n      else {\n        this.$input.css( 'width', this.options.minWidth + 'px' )\n        if (this.textDirection === 'rtl') {\n          return this.$input.width( this.$input.offset().left + this.$input.outerWidth() - this.$wrapper.offset().left - parseInt(this.$wrapper.css('padding-left'), 10) - inputPadding - 1 )\n        }\n        this.$input.width( this.$wrapper.offset().left + this.$wrapper.width() + parseInt(this.$wrapper.css('padding-left'), 10) - this.$input.offset().left - inputPadding )\n      }\n    }\n\n  , focusInput: function (e) {\n      if ( $(e.target).closest('.token').length || $(e.target).closest('.token-input').length || $(e.target).closest('.tt-dropdown-menu').length ) return\n      // Focus only after the current call stack has cleared,\n      // otherwise has no effect.\n      // Reason: mousedown is too early - input will lose focus\n      // after mousedown. However, since the input may be moved\n      // in DOM, there may be no click or mouseup event triggered.\n      var _self = this\n      setTimeout(function() {\n        _self.$input.focus()\n      }, 0)\n    }\n\n  , search: function () {\n      if ( this.$input.data('ui-autocomplete') ) {\n        this.$input.autocomplete('search')\n      }\n    }\n\n  , disable: function () {\n      this.setProperty('disabled', true);\n    }\n\n  , enable: function () {\n      this.setProperty('disabled', false);\n    }\n\n  , readonly: function () {\n      this.setProperty('readonly', true);\n    }\n\n  , writeable: function () {\n      this.setProperty('readonly', false);\n    }\n\n  , setProperty: function(property, value) {\n      this['_' + property] = value;\n      this.$input.prop(property, value);\n      this.$element.prop(property, value);\n      this.$wrapper[ value ? 'addClass' : 'removeClass' ](property);\n  }\n\n  , destroy: function() {\n      // Set field value\n      this.$element.val( this.getTokensList() );\n      // Restore styles and properties\n      this.$element.css( this.$element.data('original-styles') );\n      this.$element.prop( 'tabindex', this.$element.data('original-tabindex') );\n      \n      // Re-route tokenfield labele to original input\n      var $label = $( 'label[for=\"' + this.$input.prop('id') + '\"]' )\n      if ( $label.length ) {\n        $label.prop( 'for', this.$element.prop('id') )\n      }\n\n      // Move original element outside of tokenfield wrapper\n      this.$element.insertBefore( this.$wrapper );\n\n      // Remove tokenfield-related data\n      this.$element.removeData('original-styles')\n                   .removeData('original-tabindex')\n                   .removeData('bs.tokenfield');\n\n      // Remove tokenfield from DOM\n      this.$wrapper.remove();\n\n      var $_element = this.$element;\n      delete this;\n\n      return $_element;\n  }\n\n  }\n\n\n /* TOKENFIELD PLUGIN DEFINITION\n  * ======================== */\n\n  var old = $.fn.tokenfield\n\n  $.fn.tokenfield = function (option, param) {\n    var value\n      , args = []\n    \n    Array.prototype.push.apply( args, arguments );\n\n    var elements = this.each(function () {\n      var $this = $(this)\n        , data = $this.data('bs.tokenfield')\n        , options = typeof option == 'object' && option\n\n      if (typeof option === 'string' && data && data[option]) {\n        args.shift()\n        value = data[option].apply(data, args)\n      } else {\n        if (!data && typeof option !== 'string' && !param) $this.data('bs.tokenfield', (data = new Tokenfield(this, options)))\n      }\n    })\n\n    return typeof value !== 'undefined' ? value : elements;\n  }\n\n  $.fn.tokenfield.defaults = {\n    minWidth: 60,\n    minLength: 0,\n    allowEditing: true,\n    limit: 0,\n    autocomplete: {},\n    typeahead: {},\n    showAutocompleteOnFocus: false,\n    createTokensOnBlur: false,\n    delimiter: ',',\n    beautify: true\n  }\n\n  $.fn.tokenfield.Constructor = Tokenfield\n\n\n /* TOKENFIELD NO CONFLICT\n  * ================== */\n\n  $.fn.tokenfield.noConflict = function () {\n    $.fn.tokenfield = old\n    return this\n  }\n\n  return Tokenfield;\n\n}));\n\n"],"sourceRoot":""}